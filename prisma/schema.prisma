// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  active   @map("active")
  inactive @map("inactive")
}

enum Role_Type {
  teacher @map("teacher")
  admin   @map("admin")
  user    @map("user")
}

enum Cargo_type {
  post @map("post")
  load @map("load")
}

enum Transfer_type {
  input  @map("input")
  output @map("output")
}

enum TranslateType {
  error   @map("error")
  content @map("content")

  @@map("translate_type")
}

model Language {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String       @map("code") @db.VarChar(2)
  title      String       @map("title") @db.VarChar(64)
  image_url  String       @map("image_url") @db.VarChar()
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("language")
}

model Translate {
  id         String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String        @map("code") @db.VarChar()
  type       TranslateType @map("type")
  createdAt  DateTime      @default(now()) @map("created_at")
  status     Status        @default(active) @map("status")
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("translate")
}

model Definition {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  translateId String @map("translate_id") @db.Uuid
  languageId  String @map("language_id") @db.Uuid
  value       String @map("value") @db.VarChar()

  translate Translate @relation(fields: [translateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language  Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("definition")
}

model User {
id   Int @id @default(autoincrement())
name String 
phone String 
role Role_Type @default(user)
hashed_password String
hashed_token String 
is_active Boolean @default(false)
createAt           DateTime @default(now())
updateAt           DateTime @updatedAt
OrderTaxi         OrderTaxi[]
OredrTruck        OrderTruck[]

    @@map("user")
}

model OrderTaxi {
  id            Int      @id @default(autoincrement())
  User          User?    @relation(fields: [userId], references: [id])
  userId        Int?
  to_district   String
  from_district String
  date          DateTime
  location      String
  description   String
}

model OrderTruck {
  id              Int        @id @default(autoincrement())
  User            User?      @relation(fields: [userId], references: [id])
  userId          Int?
  cargo_type      Cargo_type @default(load)
  date            DateTime
  capacity        Int
  recipient_name  String
  recipient_phone String
  to_district     String
  from_district   String
  location        String
  description     String
}

model Driver {
  id              Int          @id @default(autoincrement())
  first_name      String
  last_name       String
  phone           String
  address         String
  photo           String
  driver_license  String
  is_active       Boolean? // Optional
  hashed_token    String? // Optional
  hashed_password String? // Optional
  total_balance   Decimal
  balance         Balance[]
  driver_car      Driver_car[]
}

model Balance {
  id            Int           @id @default(autoincrement())
  amount        Decimal
  Driver        Driver?       @relation(fields: [driverId], references: [id])
  driverId      Int
  date          DateTime
  trunsfer_type Transfer_type @default(input)
}

model Car {
  id            Int    @id @default(autoincrement())
  model         String
  color         String
  number        String
  photo         String
  text_passport String
  capacity      String

  driver_car Driver_car[]
}

model Driver_car {
  id        Int @id @default(autoincrement())
  car_id    Int @map("car_id")
  driver_id Int @map("driver_id")
  car    Car    @relation(fields: [car_id], references: [id])
  driver Driver @relation(fields: [driver_id], references: [id])
}

model Region {
  id       Int        @id @default(autoincrement())
  name     String
  district District[]
}

model District {
  id        Int    @id @default(autoincrement())
  name      String
  region_id Int    @map("region_id")
  region    Region @relation(fields: [region_id], references: [id])
}
